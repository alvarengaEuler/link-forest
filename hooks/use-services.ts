"use client"

import { useState, useEffect } from "react"
import { useToast } from "@/components/ui/use-toast"
import type { Service, NewService } from "@/types/service"

// Dados iniciais dos servi√ßos
const initialServices: Service[] = [
  {
    id: "ultrassom-abdominal",
    icon: "üîç",
    title: "Ultrassom Abdominal",
    description: "Exame completo da cavidade abdominal para diagn√≥stico de altera√ß√µes em √≥rg√£os internos.",
    fullDescription: `O ultrassom abdominal √© um exame n√£o invasivo que permite a visualiza√ß√£o dos √≥rg√£os internos da cavidade abdominal do seu pet.

Este exame √© fundamental para o diagn√≥stico de diversas condi√ß√µes, como:

‚Ä¢ Altera√ß√µes no f√≠gado, ba√ßo e rins
‚Ä¢ Problemas no trato gastrointestinal
‚Ä¢ Presen√ßa de l√≠quido livre na cavidade
‚Ä¢ Identifica√ß√£o de massas e tumores
‚Ä¢ Avalia√ß√£o da bexiga e pr√≥stata

O exame √© realizado com o animal acordado, em posi√ß√£o confort√°vel, e tem dura√ß√£o m√©dia de 20 a 30 minutos.`,
    preparo:
      "Jejum de 6 a 8 horas para c√£es e 4 a 6 horas para gatos. N√£o deixar o animal urinar 1 hora antes do exame.",
    duracao: "20 a 30 minutos",
    recomendado: [
      "Pets com sintomas gastrointestinais",
      "Animais idosos",
      "Acompanhamento de doen√ßas cr√¥nicas",
      "Avalia√ß√£o pr√©-cir√∫rgica",
    ],
  },
  {
    id: "ultrassom-gestacional",
    icon: "üêæ",
    title: "Ultrassom Gestacional",
    description: "Acompanhamento da gesta√ß√£o, contagem fetal e avalia√ß√£o do desenvolvimento dos filhotes.",
    fullDescription: `O ultrassom gestacional √© um exame essencial para o acompanhamento da gesta√ß√£o do seu pet, permitindo:

‚Ä¢ Confirma√ß√£o da gesta√ß√£o a partir de 15-20 dias
‚Ä¢ Contagem precisa do n√∫mero de filhotes
‚Ä¢ Avalia√ß√£o do desenvolvimento fetal
‚Ä¢ Verifica√ß√£o da viabilidade dos fetos
‚Ä¢ Estimativa da data do parto

Recomendamos realizar o primeiro exame entre 20-25 dias ap√≥s o cruzamento e acompanhamentos peri√≥dicos durante a gesta√ß√£o.`,
    preparo:
      "N√£o √© necess√°rio jejum. Recomenda-se n√£o deixar o animal urinar 1 hora antes do exame para melhor visualiza√ß√£o.",
    duracao: "15 a 20 minutos",
    recomendado: ["Confirma√ß√£o de gesta√ß√£o", "Acompanhamento gestacional", "Avalia√ß√£o pr√©-parto"],
  },
  {
    id: "ultrassom-ocular",
    icon: "üëÅÔ∏è",
    title: "Ultrassom Ocular",
    description: "Exame por imagem que avalia estruturas internas dos olhos, ideal para detectar altera√ß√µes oft√°lmicas.",
    fullDescription: `O ultrassom ocular √© um exame de imagem que utiliza ondas sonoras para avaliar as estruturas internas dos olhos do seu pet, especialmente quando h√° opacifica√ß√£o das estruturas oculares, como em casos de catarata.
  
  Este exame permite:
  
  ‚Ä¢ Avalia√ß√£o da retina e nervo √≥ptico  
  ‚Ä¢ Detec√ß√£o de descolamento de retina  
  ‚Ä¢ Identifica√ß√£o de tumores oculares  
  ‚Ä¢ Verifica√ß√£o de hemorragias ou inflama√ß√µes internas  
  ‚Ä¢ Apoio no diagn√≥stico de doen√ßas intraoculares
  
  √â um exame r√°pido, indolor e n√£o invasivo, realizado com o animal acordado e levemente contido.`,
    preparo: "N√£o √© necess√°rio jejum. O animal deve estar calmo; em alguns casos, pode ser necess√°rio o uso de col√≠rio anest√©sico.",
    duracao: "15 a 20 minutos",
    recomendado: [
      "Pets com suspeita de catarata ou cegueira s√∫bita",
      "Acompanhamento de doen√ßas oculares cr√¥nicas",
      "Avalia√ß√£o pr√©-cir√∫rgica ocular",
      "Animais com trauma ocular",
    ],
  }
  
  // Outros servi√ßos...
]

export function useServices() {
  const [services, setServices] = useState<Service[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const { toast } = useToast()

  // Carregar servi√ßos do localStorage ou usar os iniciais
  useEffect(() => {
    const loadServices = () => {
      try {
        const savedServices = localStorage.getItem("veturimagem-services")
        if (savedServices) {
          setServices(JSON.parse(savedServices))
        } else {
          setServices(initialServices)
          localStorage.setItem("veturimagem-services", JSON.stringify(initialServices))
        }
      } catch (error) {
        console.error("Erro ao carregar servi√ßos:", error)
        setServices(initialServices)
      } finally {
        setIsLoading(false)
      }
    }

    loadServices()
  }, [])

  // Salvar servi√ßos no localStorage quando houver mudan√ßas
  useEffect(() => {
    if (!isLoading) {
      localStorage.setItem("veturimagem-services", JSON.stringify(services))
    }
  }, [services, isLoading])

  // Fun√ß√£o para criar um novo servi√ßo
  const createService = (newService: NewService) => {
    // Gerar ID a partir do t√≠tulo se n√£o for fornecido
    const serviceId =
      newService.id ||
      newService.title
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^\w\s-]/g, "")
        .replace(/\s+/g, "-")

    // Verificar se o ID j√° existe
    if (services.some((service) => service.id === serviceId)) {
      toast({
        title: "Erro ao criar servi√ßo",
        description: `J√° existe um servi√ßo com o ID "${serviceId}"`,
        variant: "destructive",
      })
      return false
    }

    const serviceToAdd = {
      ...newService,
      id: serviceId,
    } as Service

    setServices((prev) => [...prev, serviceToAdd])
    toast({
      title: "Servi√ßo criado",
      description: `O servi√ßo "${newService.title}" foi criado com sucesso.`,
    })
    return true
  }

  // Fun√ß√£o para atualizar um servi√ßo existente
  const updateService = (id: string, updatedService: NewService) => {
    // Verificar se o servi√ßo existe
    const serviceExists = services.some((service) => service.id === id)
    if (!serviceExists) {
      toast({
        title: "Erro ao atualizar servi√ßo",
        description: `Servi√ßo com ID "${id}" n√£o encontrado.`,
        variant: "destructive",
      })
      return false
    }

    setServices((prev) => prev.map((service) => (service.id === id ? ({ ...updatedService, id } as Service) : service)))
    toast({
      title: "Servi√ßo atualizado",
      description: `O servi√ßo "${updatedService.title}" foi atualizado com sucesso.`,
    })
    return true
  }

  // Fun√ß√£o para excluir um servi√ßo
  const deleteService = (id: string) => {
    // Verificar se o servi√ßo existe
    const serviceExists = services.some((service) => service.id === id)
    if (!serviceExists) {
      toast({
        title: "Erro ao excluir servi√ßo",
        description: `Servi√ßo com ID "${id}" n√£o encontrado.`,
        variant: "destructive",
      })
      return false
    }

    const serviceName = services.find((service) => service.id === id)?.title
    setServices((prev) => prev.filter((service) => service.id !== id))
    toast({
      title: "Servi√ßo exclu√≠do",
      description: `O servi√ßo "${serviceName}" foi exclu√≠do com sucesso.`,
    })
    return true
  }

  // Fun√ß√£o para obter um servi√ßo pelo ID
  const getServiceById = (id: string) => {
    return services.find((service) => service.id === id)
  }

  return {
    services,
    isLoading,
    createService,
    updateService,
    deleteService,
    getServiceById,
  }
}

